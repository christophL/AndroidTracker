package uibk.ac.at.androidtracker;

import android.app.Activity;
import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.support.v4.content.LocalBroadcastManager;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;


public class MainActivity extends Activity{
    private static final int REQUEST_CODE_ENABLE_ADMIN = 1;
    private boolean updatesActive;

    private DevicePolicyManager dpm;
    private ComponentName receiverName;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //register broadcast receiver that will provide updates received from the location updater
        LocalBroadcastManager bcmgr = LocalBroadcastManager.getInstance(this);
        IntentFilter filter = new IntentFilter(LocationUpdaterService.BROADCAST_LOCATION_UPDATE);
        bcmgr.registerReceiver(new LocationReceiver(this), filter);

        //register broadcast receiver that will react on received commands
        filter = new IntentFilter(PostLocationTask.BROADCAST_CMD_RECEIVED);
        bcmgr.registerReceiver(new CommandReceiver(this), filter);

        //register a DeviceAdminReceiver (required for accessing the device admin API)
        dpm = (DevicePolicyManager) getSystemService(Context.DEVICE_POLICY_SERVICE);
        receiverName = new ComponentName(this, AdminWipeLockReceiver.class);

        //restore previous state (e.g. after switching to landscape mode)
        if(savedInstanceState != null){
            TextView log = (TextView) findViewById(R.id.txtLog);
            log.setText(savedInstanceState.getCharSequence("curLog"));

            updatesActive = savedInstanceState.getBoolean("updatesActive");
            enableControls(!updatesActive);
        }
        CheckBox cbAdmin = (CheckBox) findViewById(R.id.cbAdmin);
        cbAdmin.setChecked(isAdminActive());
    }

    /**
     * Checks whether AndroidTracker was granted device administration
     * @return true iff device administration is active
     */
    private boolean isAdminActive(){
        return dpm.isAdminActive(receiverName);
    }

    /**
     * Enables/Disables user controls
     * @param enable should the controls be enabled?
     */
    private void enableControls(boolean enable){
        Button btnUpdates = (Button) findViewById(R.id.btnSend);
        EditText txtInterval = (EditText) findViewById(R.id.txtUpdateInterval);
        btnUpdates.setEnabled(enable);
        txtInterval.setEnabled(enable);
    }

    // auto-generated by android-studio
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    // auto-generated by android-studio
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    /**
     * Called when the state of the current activity needs to be saved (e.g., when switching to
     * landscape mode)
     * Saves the current log and the update state to be able to reset them after the activity
     * was reloaded
     * @param outBundle the bundle containing the relevant state information
     */
    @Override
    public void onSaveInstanceState(Bundle outBundle){
        super.onSaveInstanceState(outBundle);
        TextView log = (TextView) findViewById(R.id.txtLog);
        outBundle.putCharSequence("curLog", log.getText());
        outBundle.putBoolean("updatesActive", updatesActive);
    }

    /**
     * Called when the "Start/Stop Location Updates" button is clicked.
     * Starts the location updater as a service (runs in background), providing the
     * update interval entered in the textbox above
     * @param view the clicked button
     */
    public void onBtnUpdateClick(View view){
        EditText txtInterval = (EditText) findViewById(R.id.txtUpdateInterval);
        int interval;
        try{
            int parsed = Integer.parseInt(txtInterval.getText().toString());
            if(parsed < 1){
                Toast.makeText(this, "Update interval needs to be >= 1", Toast.LENGTH_LONG).show();
                return;
            }
            interval = parsed;
        } catch(NumberFormatException e) {
            Toast.makeText(this, "Could not parse provided update interval", Toast.LENGTH_LONG).show();
            return;
        }
        //TODO: stop updates
        updatesActive = true;
        enableControls(false);
        Intent intent = new Intent(this, LocationUpdaterService.class);
        intent.setAction(LocationUpdaterService.ACTION_START_UPDATING);
        intent.putExtra(LocationUpdaterService.EXTRA_UPDATE_INTERVAL, interval);
        startService(intent);
    }

    /**
     * Sets the lock-screen password to the provided password and immediately locks the device
     * @param password the desired lock-screen password
     */
    public void lockDevice(String password){
        if(isAdminActive()){
            dpm.resetPassword(password, 0);
            dpm.lockNow();
        }
    }

    /**
     * Performs a factory-reset of the device and also erases external storage (SD-card)
     */
    public void wipeDevice(){
        if(isAdminActive()){
            dpm.wipeData(DevicePolicyManager.WIPE_EXTERNAL_STORAGE);
        }
    }

    /**
     * Called when the "Enable Device Administration" checkbox is clicked.
     * If the device administration should be activated, a new activity that asks for the user's
     * consent is started, otherwise device administration is simply disabled
     * @param view the clicked checkbox
     */
    public void onCbAdminClicked(View view) {
        boolean isChecked = ((CheckBox) view).isChecked();
        if(isChecked){
            Intent intent = new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN);
            intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, receiverName);
            intent.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION, R.string.admin_explanation);
            startActivityForResult(intent, REQUEST_CODE_ENABLE_ADMIN);
        } else {
            dpm.removeActiveAdmin(receiverName);
        }
    }

    /**
     * Called when an activity started by this activity finished (in this case only the activity
     * that asks for device administration priviledges).
     * Sets the checked state of the device admin checkbox according to the user's answer.
     * (should not stay checked if the user declined the required permissions)
     * @param requestCode a code indicating the activity that finished
     * @param resultCode the result the activity reported
     * @param data additional data
     */
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data){
        if(requestCode != REQUEST_CODE_ENABLE_ADMIN) return;

        CheckBox cbAdmin = (CheckBox) findViewById(R.id.cbAdmin);
        if(resultCode == Activity.RESULT_OK){
            cbAdmin.setChecked(true);
        } else {
            cbAdmin.setChecked(false);
        }
    }
}
